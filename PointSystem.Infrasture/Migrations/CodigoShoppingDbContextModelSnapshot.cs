// <auto-generated />
using System;
using CodigoShopping.Infrastructure.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodigoShopping.Infrastructure.Migrations
{
    [DbContext(typeof(CodigoShoppingDbContext))]
    partial class CodigoShoppingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CodigoShopping.Domain.Model.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsConfirmMobileNumber")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLoginDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("OTPExpirayDateTIme")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OtpCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RegisterDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", (string)null);
                });

            modelBuilder.Entity("CodigoShopping.Domain.Model.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvailableStock")
                        .HasColumnType("int");

                    b.Property<int>("CatalogTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MaxStockThreshold")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("OnReorder")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PictureFileName")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestockThreshold")
                        .HasColumnType("int");

                    b.Property<int?>("ShoppingTransactionDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CatalogTypeId");

                    b.HasIndex("ShoppingTransactionDetailsId");

                    b.ToTable("CatalogItem", (string)null);
                });

            modelBuilder.Entity("CodigoShopping.Domain.Model.CatalogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CatalogType", (string)null);
                });

            modelBuilder.Entity("CodigoShopping.Domain.Model.PointData", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<decimal>("NumberPointofAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("NumberofPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("PointData", (string)null);
                });

            modelBuilder.Entity("CodigoShopping.Domain.Model.PointSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("PointAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PointMaxScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PointSetting", (string)null);
                });

            modelBuilder.Entity("CodigoShopping.Domain.Model.ShoppingTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCalculatePoint")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ShoppingTransactionDetailsId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalTransactionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TransactionPoint")
                        .HasColumnType("int");

                    b.Property<string>("TransactionRefno")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ShoppingTransactionDetailsId");

                    b.ToTable("ShoppingTransaction", (string)null);
                });

            modelBuilder.Entity("CodigoShopping.Domain.Model.ShoppingTransactionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CatelogItemId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ShoppingTransactionDetails", (string)null);
                });

            modelBuilder.Entity("CodigoShopping.Domain.Model.CatalogItem", b =>
                {
                    b.HasOne("CodigoShopping.Domain.Model.CatalogType", "CatalogType")
                        .WithMany()
                        .HasForeignKey("CatalogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodigoShopping.Domain.Model.ShoppingTransactionDetails", null)
                        .WithMany("CatalogItem")
                        .HasForeignKey("ShoppingTransactionDetailsId");

                    b.Navigation("CatalogType");
                });

            modelBuilder.Entity("CodigoShopping.Domain.Model.PointData", b =>
                {
                    b.HasOne("CodigoShopping.Domain.Model.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("CodigoShopping.Domain.Model.ShoppingTransaction", b =>
                {
                    b.HasOne("CodigoShopping.Domain.Model.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodigoShopping.Domain.Model.ShoppingTransactionDetails", null)
                        .WithMany("ShoppingTransaction")
                        .HasForeignKey("ShoppingTransactionDetailsId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("CodigoShopping.Domain.Model.ShoppingTransactionDetails", b =>
                {
                    b.Navigation("CatalogItem");

                    b.Navigation("ShoppingTransaction");
                });
#pragma warning restore 612, 618
        }
    }
}
